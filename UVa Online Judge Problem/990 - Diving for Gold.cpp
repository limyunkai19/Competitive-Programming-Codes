// line 27 very critical, got WA few time without dp[ii(totalgold+gold[i], timeused+3*w*depth[i])] == 0// as it will make the tresure sequence wrong.#include <iostream>#include <vector>#include <map>using namespace std;typedef pair<int, int> ii;int depth[40], gold[40];int main(){	int t, w, n;	bool first = true;	while(cin >> t >> w >> n){		if(!first) cout << endl;		first = false;		map<ii, int> dp;		dp[ii(0, 0)] = -1;		for(int i = 1; i <= n; i++){			cin >> depth[i] >> gold[i];			for(map<ii, int>::reverse_iterator it = dp.rbegin(); it != dp.rend(); it++){				int timeused = (it->first).second, totalgold = (it->first).first;				if(timeused + 3*w*depth[i] <= t && dp[ii(totalgold+gold[i], timeused+3*w*depth[i])] == 0){					dp[ii(totalgold+gold[i], timeused+3*w*depth[i])] = i;				}			}		}		vector<int> ans;		int timeused = (dp.rbegin()->first).second, totalgold = (dp.rbegin()->first).first;		cout << totalgold << endl;		while(timeused != 0){			int i = dp[ii(totalgold, timeused)];			ans.push_back(i);			totalgold -= gold[i];			timeused -= 3*w*depth[i];		}		cout << ans.size() << endl;		for(int i = ans.size()-1; i >= 0; i--){			cout << depth[ans[i]] << ' ' << gold[ans[i]] << endl;		}	}	return 0;}